// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductApiServiceClient is the client API for ProductApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductApiServiceClient interface {
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
	ListCategory(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error)
	CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*CreateBrandResponse, error)
	GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*GetBrandResponse, error)
	ListBrandsGrouped(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListBrandsGroupedResponse, error)
	ListBrands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListBrandsResponse, error)
	DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*UpdateBrandResponse, error)
	CreateSize(ctx context.Context, in *CreateSizeRequest, opts ...grpc.CallOption) (*CreateSizeResponse, error)
	GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error)
	ListSizes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSizesResponse, error)
	UpdateSize(ctx context.Context, in *UpdateSizeRequest, opts ...grpc.CallOption) (*UpdateSizeResponse, error)
	DeleteSize(ctx context.Context, in *DeleteSizeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	ListProductsById(ctx context.Context, in *ListProductsByIdRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	ListProductsByPhoto(ctx context.Context, in *ListProductsByPhotoRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	CreateFinalProduct(ctx context.Context, in *CreateFinalProductRequest, opts ...grpc.CallOption) (*CreateFinalProductResponse, error)
	UpdateFinalProduct(ctx context.Context, in *UpdateFinalProductRequest, opts ...grpc.CallOption) (*UpdateFinalProductResponse, error)
	BatchUpdateFinalProduct(ctx context.Context, in *BatchUpdateFinalProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFinalProduct(ctx context.Context, in *DeleteFinalProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFinalProduct(ctx context.Context, in *GetFinalProductRequest, opts ...grpc.CallOption) (*GetFinalProductResponse, error)
	ListFinalProducts(ctx context.Context, in *ListFinalProductsRequest, opts ...grpc.CallOption) (*ListFinalProductsResponse, error)
	ListFullFinalProducts(ctx context.Context, in *ListFullFinalProductsRequest, opts ...grpc.CallOption) (*ListFullFinalProductsResponse, error)
	GetFullProduct(ctx context.Context, in *GetFullProductRequest, opts ...grpc.CallOption) (*GetFullProductResponse, error)
}

type productApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductApiServiceClient(cc grpc.ClientConnInterface) ProductApiServiceClient {
	return &productApiServiceClient{cc}
}

func (c *productApiServiceClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	out := new(UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	out := new(GetCategoryResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) ListCategory(ctx context.Context, in *ListCategoryRequest, opts ...grpc.CallOption) (*ListCategoryResponse, error) {
	out := new(ListCategoryResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/ListCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...grpc.CallOption) (*CreateBrandResponse, error) {
	out := new(CreateBrandResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/CreateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) GetBrand(ctx context.Context, in *GetBrandRequest, opts ...grpc.CallOption) (*GetBrandResponse, error) {
	out := new(GetBrandResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/GetBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) ListBrandsGrouped(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListBrandsGroupedResponse, error) {
	out := new(ListBrandsGroupedResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/ListBrandsGrouped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) ListBrands(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListBrandsResponse, error) {
	out := new(ListBrandsResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/ListBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/DeleteBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...grpc.CallOption) (*UpdateBrandResponse, error) {
	out := new(UpdateBrandResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) CreateSize(ctx context.Context, in *CreateSizeRequest, opts ...grpc.CallOption) (*CreateSizeResponse, error) {
	out := new(CreateSizeResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/CreateSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) GetSize(ctx context.Context, in *GetSizeRequest, opts ...grpc.CallOption) (*GetSizeResponse, error) {
	out := new(GetSizeResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/GetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) ListSizes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListSizesResponse, error) {
	out := new(ListSizesResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/ListSizes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) UpdateSize(ctx context.Context, in *UpdateSizeRequest, opts ...grpc.CallOption) (*UpdateSizeResponse, error) {
	out := new(UpdateSizeResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/UpdateSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) DeleteSize(ctx context.Context, in *DeleteSizeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/DeleteSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) ListProductsById(ctx context.Context, in *ListProductsByIdRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/ListProductsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) ListProductsByPhoto(ctx context.Context, in *ListProductsByPhotoRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/ListProductsByPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) CreateFinalProduct(ctx context.Context, in *CreateFinalProductRequest, opts ...grpc.CallOption) (*CreateFinalProductResponse, error) {
	out := new(CreateFinalProductResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/CreateFinalProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) UpdateFinalProduct(ctx context.Context, in *UpdateFinalProductRequest, opts ...grpc.CallOption) (*UpdateFinalProductResponse, error) {
	out := new(UpdateFinalProductResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/UpdateFinalProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) BatchUpdateFinalProduct(ctx context.Context, in *BatchUpdateFinalProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/BatchUpdateFinalProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) DeleteFinalProduct(ctx context.Context, in *DeleteFinalProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/DeleteFinalProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) GetFinalProduct(ctx context.Context, in *GetFinalProductRequest, opts ...grpc.CallOption) (*GetFinalProductResponse, error) {
	out := new(GetFinalProductResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/GetFinalProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) ListFinalProducts(ctx context.Context, in *ListFinalProductsRequest, opts ...grpc.CallOption) (*ListFinalProductsResponse, error) {
	out := new(ListFinalProductsResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/ListFinalProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) ListFullFinalProducts(ctx context.Context, in *ListFullFinalProductsRequest, opts ...grpc.CallOption) (*ListFullFinalProductsResponse, error) {
	out := new(ListFullFinalProductsResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/ListFullFinalProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productApiServiceClient) GetFullProduct(ctx context.Context, in *GetFullProductRequest, opts ...grpc.CallOption) (*GetFullProductResponse, error) {
	out := new(GetFullProductResponse)
	err := c.cc.Invoke(ctx, "/product.api.ProductApiService/GetFullProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductApiServiceServer is the server API for ProductApiService service.
// All implementations must embed UnimplementedProductApiServiceServer
// for forward compatibility
type ProductApiServiceServer interface {
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*emptypb.Empty, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error)
	GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error)
	ListCategory(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error)
	CreateBrand(context.Context, *CreateBrandRequest) (*CreateBrandResponse, error)
	GetBrand(context.Context, *GetBrandRequest) (*GetBrandResponse, error)
	ListBrandsGrouped(context.Context, *emptypb.Empty) (*ListBrandsGroupedResponse, error)
	ListBrands(context.Context, *emptypb.Empty) (*ListBrandsResponse, error)
	DeleteBrand(context.Context, *DeleteBrandRequest) (*emptypb.Empty, error)
	UpdateBrand(context.Context, *UpdateBrandRequest) (*UpdateBrandResponse, error)
	CreateSize(context.Context, *CreateSizeRequest) (*CreateSizeResponse, error)
	GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error)
	ListSizes(context.Context, *emptypb.Empty) (*ListSizesResponse, error)
	UpdateSize(context.Context, *UpdateSizeRequest) (*UpdateSizeResponse, error)
	DeleteSize(context.Context, *DeleteSizeRequest) (*emptypb.Empty, error)
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error)
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	ListProductsById(context.Context, *ListProductsByIdRequest) (*ListProductsResponse, error)
	ListProductsByPhoto(context.Context, *ListProductsByPhotoRequest) (*ListProductsResponse, error)
	CreateFinalProduct(context.Context, *CreateFinalProductRequest) (*CreateFinalProductResponse, error)
	UpdateFinalProduct(context.Context, *UpdateFinalProductRequest) (*UpdateFinalProductResponse, error)
	BatchUpdateFinalProduct(context.Context, *BatchUpdateFinalProductRequest) (*emptypb.Empty, error)
	DeleteFinalProduct(context.Context, *DeleteFinalProductRequest) (*emptypb.Empty, error)
	GetFinalProduct(context.Context, *GetFinalProductRequest) (*GetFinalProductResponse, error)
	ListFinalProducts(context.Context, *ListFinalProductsRequest) (*ListFinalProductsResponse, error)
	ListFullFinalProducts(context.Context, *ListFullFinalProductsRequest) (*ListFullFinalProductsResponse, error)
	GetFullProduct(context.Context, *GetFullProductRequest) (*GetFullProductResponse, error)
	mustEmbedUnimplementedProductApiServiceServer()
}

// UnimplementedProductApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductApiServiceServer struct {
}

func (UnimplementedProductApiServiceServer) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductApiServiceServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedProductApiServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedProductApiServiceServer) GetCategory(context.Context, *GetCategoryRequest) (*GetCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedProductApiServiceServer) ListCategory(context.Context, *ListCategoryRequest) (*ListCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategory not implemented")
}
func (UnimplementedProductApiServiceServer) CreateBrand(context.Context, *CreateBrandRequest) (*CreateBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedProductApiServiceServer) GetBrand(context.Context, *GetBrandRequest) (*GetBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (UnimplementedProductApiServiceServer) ListBrandsGrouped(context.Context, *emptypb.Empty) (*ListBrandsGroupedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrandsGrouped not implemented")
}
func (UnimplementedProductApiServiceServer) ListBrands(context.Context, *emptypb.Empty) (*ListBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrands not implemented")
}
func (UnimplementedProductApiServiceServer) DeleteBrand(context.Context, *DeleteBrandRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedProductApiServiceServer) UpdateBrand(context.Context, *UpdateBrandRequest) (*UpdateBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedProductApiServiceServer) CreateSize(context.Context, *CreateSizeRequest) (*CreateSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSize not implemented")
}
func (UnimplementedProductApiServiceServer) GetSize(context.Context, *GetSizeRequest) (*GetSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedProductApiServiceServer) ListSizes(context.Context, *emptypb.Empty) (*ListSizesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSizes not implemented")
}
func (UnimplementedProductApiServiceServer) UpdateSize(context.Context, *UpdateSizeRequest) (*UpdateSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSize not implemented")
}
func (UnimplementedProductApiServiceServer) DeleteSize(context.Context, *DeleteSizeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSize not implemented")
}
func (UnimplementedProductApiServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductApiServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductApiServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductApiServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductApiServiceServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedProductApiServiceServer) ListProductsById(context.Context, *ListProductsByIdRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductsById not implemented")
}
func (UnimplementedProductApiServiceServer) ListProductsByPhoto(context.Context, *ListProductsByPhotoRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductsByPhoto not implemented")
}
func (UnimplementedProductApiServiceServer) CreateFinalProduct(context.Context, *CreateFinalProductRequest) (*CreateFinalProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinalProduct not implemented")
}
func (UnimplementedProductApiServiceServer) UpdateFinalProduct(context.Context, *UpdateFinalProductRequest) (*UpdateFinalProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinalProduct not implemented")
}
func (UnimplementedProductApiServiceServer) BatchUpdateFinalProduct(context.Context, *BatchUpdateFinalProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateFinalProduct not implemented")
}
func (UnimplementedProductApiServiceServer) DeleteFinalProduct(context.Context, *DeleteFinalProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFinalProduct not implemented")
}
func (UnimplementedProductApiServiceServer) GetFinalProduct(context.Context, *GetFinalProductRequest) (*GetFinalProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalProduct not implemented")
}
func (UnimplementedProductApiServiceServer) ListFinalProducts(context.Context, *ListFinalProductsRequest) (*ListFinalProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFinalProducts not implemented")
}
func (UnimplementedProductApiServiceServer) ListFullFinalProducts(context.Context, *ListFullFinalProductsRequest) (*ListFullFinalProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFullFinalProducts not implemented")
}
func (UnimplementedProductApiServiceServer) GetFullProduct(context.Context, *GetFullProductRequest) (*GetFullProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullProduct not implemented")
}
func (UnimplementedProductApiServiceServer) mustEmbedUnimplementedProductApiServiceServer() {}

// UnsafeProductApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductApiServiceServer will
// result in compilation errors.
type UnsafeProductApiServiceServer interface {
	mustEmbedUnimplementedProductApiServiceServer()
}

func RegisterProductApiServiceServer(s grpc.ServiceRegistrar, srv ProductApiServiceServer) {
	s.RegisterService(&ProductApiService_ServiceDesc, srv)
}

func _ProductApiService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_ListCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).ListCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/ListCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).ListCategory(ctx, req.(*ListCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/CreateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).CreateBrand(ctx, req.(*CreateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/GetBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).GetBrand(ctx, req.(*GetBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_ListBrandsGrouped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).ListBrandsGrouped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/ListBrandsGrouped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).ListBrandsGrouped(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_ListBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).ListBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/ListBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).ListBrands(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/DeleteBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).DeleteBrand(ctx, req.(*DeleteBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).UpdateBrand(ctx, req.(*UpdateBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_CreateSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).CreateSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/CreateSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).CreateSize(ctx, req.(*CreateSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/GetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).GetSize(ctx, req.(*GetSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_ListSizes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).ListSizes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/ListSizes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).ListSizes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_UpdateSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).UpdateSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/UpdateSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).UpdateSize(ctx, req.(*UpdateSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_DeleteSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).DeleteSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/DeleteSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).DeleteSize(ctx, req.(*DeleteSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_ListProductsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).ListProductsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/ListProductsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).ListProductsById(ctx, req.(*ListProductsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_ListProductsByPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsByPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).ListProductsByPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/ListProductsByPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).ListProductsByPhoto(ctx, req.(*ListProductsByPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_CreateFinalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinalProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).CreateFinalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/CreateFinalProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).CreateFinalProduct(ctx, req.(*CreateFinalProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_UpdateFinalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinalProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).UpdateFinalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/UpdateFinalProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).UpdateFinalProduct(ctx, req.(*UpdateFinalProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_BatchUpdateFinalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateFinalProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).BatchUpdateFinalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/BatchUpdateFinalProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).BatchUpdateFinalProduct(ctx, req.(*BatchUpdateFinalProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_DeleteFinalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFinalProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).DeleteFinalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/DeleteFinalProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).DeleteFinalProduct(ctx, req.(*DeleteFinalProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_GetFinalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinalProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).GetFinalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/GetFinalProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).GetFinalProduct(ctx, req.(*GetFinalProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_ListFinalProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFinalProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).ListFinalProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/ListFinalProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).ListFinalProducts(ctx, req.(*ListFinalProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_ListFullFinalProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFullFinalProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).ListFullFinalProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/ListFullFinalProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).ListFullFinalProducts(ctx, req.(*ListFullFinalProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductApiService_GetFullProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductApiServiceServer).GetFullProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.api.ProductApiService/GetFullProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductApiServiceServer).GetFullProduct(ctx, req.(*GetFullProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductApiService_ServiceDesc is the grpc.ServiceDesc for ProductApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.api.ProductApiService",
	HandlerType: (*ProductApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategory",
			Handler:    _ProductApiService_CreateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _ProductApiService_DeleteCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _ProductApiService_UpdateCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _ProductApiService_GetCategory_Handler,
		},
		{
			MethodName: "ListCategory",
			Handler:    _ProductApiService_ListCategory_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _ProductApiService_CreateBrand_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _ProductApiService_GetBrand_Handler,
		},
		{
			MethodName: "ListBrandsGrouped",
			Handler:    _ProductApiService_ListBrandsGrouped_Handler,
		},
		{
			MethodName: "ListBrands",
			Handler:    _ProductApiService_ListBrands_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _ProductApiService_DeleteBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _ProductApiService_UpdateBrand_Handler,
		},
		{
			MethodName: "CreateSize",
			Handler:    _ProductApiService_CreateSize_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _ProductApiService_GetSize_Handler,
		},
		{
			MethodName: "ListSizes",
			Handler:    _ProductApiService_ListSizes_Handler,
		},
		{
			MethodName: "UpdateSize",
			Handler:    _ProductApiService_UpdateSize_Handler,
		},
		{
			MethodName: "DeleteSize",
			Handler:    _ProductApiService_DeleteSize_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _ProductApiService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductApiService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductApiService_DeleteProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ProductApiService_GetProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _ProductApiService_ListProducts_Handler,
		},
		{
			MethodName: "ListProductsById",
			Handler:    _ProductApiService_ListProductsById_Handler,
		},
		{
			MethodName: "ListProductsByPhoto",
			Handler:    _ProductApiService_ListProductsByPhoto_Handler,
		},
		{
			MethodName: "CreateFinalProduct",
			Handler:    _ProductApiService_CreateFinalProduct_Handler,
		},
		{
			MethodName: "UpdateFinalProduct",
			Handler:    _ProductApiService_UpdateFinalProduct_Handler,
		},
		{
			MethodName: "BatchUpdateFinalProduct",
			Handler:    _ProductApiService_BatchUpdateFinalProduct_Handler,
		},
		{
			MethodName: "DeleteFinalProduct",
			Handler:    _ProductApiService_DeleteFinalProduct_Handler,
		},
		{
			MethodName: "GetFinalProduct",
			Handler:    _ProductApiService_GetFinalProduct_Handler,
		},
		{
			MethodName: "ListFinalProducts",
			Handler:    _ProductApiService_ListFinalProducts_Handler,
		},
		{
			MethodName: "ListFullFinalProducts",
			Handler:    _ProductApiService_ListFullFinalProducts_Handler,
		},
		{
			MethodName: "GetFullProduct",
			Handler:    _ProductApiService_GetFullProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/product/v1/product-api.proto",
}
